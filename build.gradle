apply plugin: 'base'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: com.opentext.dropmerge.DropMergeWikiPlugin


dropMerge {
    team {
        name 'Platform core team'
        scrumMaster 'gjansen'
        architect 'wjgerrit', 'broos'
        productManager 'jpluimer'
        otherMembers 'astellingwerf', 'dkwakkel', 'jrosman', 'rdouden', 'wvplagge'
    }

    wiki {
        userName 'astellin'
    }

    jenkinsServers {
        buildmasterNL { url 'http://buildmaster-nl.vanenburg.com/jenkins' }
        buildmasterHYD { url 'http://buildmaster-hyd.vanenburg.com/jenkins' }
        jenkinsOfSVT { url 'http://srv-ind-svt9l.vanenburg.com:8080' }
        jenkinsOfCMT { url 'http://cmt-jenkins.vanenburg.com/jenkins' }
        globalUIUnits { url 'http://10.192.69.9:8080' }
    }
    jenkinsJobs {
        def uiUnitComponents = ['artifactaudit', 'adminui', 'ldapconn', 'webgateway']

        // Wip jobs
        wipLinux {
            jobName 'pct-trunk-wip-build-installer-l-x64'
            server jenkinsServers.buildmasterNL
            description 'Linux'
        }
        wipLinuxJava8 {
            jobName 'pct-trunk-wip-build-installer-l-j8'
            server jenkinsServers.buildmasterNL
            description 'Linux - Java 8'
        }
        wipWindows {
            jobName 'pct-trunk-wip-build-installer-w-x64'
            server jenkinsServers.buildmasterNL
            description 'Windows'
        }
        wipFrtLinux {
            jobName 'pct-trunk-wip-frt-l-x64'
            server jenkinsServers.buildmasterNL
            description 'Windows'
        }
        wipFrtLinuxJava8 {
            jobName 'pct-trunk-wip-frt-l-j8'
            server jenkinsServers.buildmasterNL
            description 'Windows'
        }
        wipFrtWindows {
            jobName 'pct-trunk-wip-frt-w-x64'
            server jenkinsServers.buildmasterNL
            description 'Windows'
        }
        uiUnitComponents.each { component ->
            "wip-uiunit-$component" {
                jobName 'pct-trunk-wip-uiunit'
                server jenkinsServers.buildmasterNL
                description component.replace('artifact', '')
                matrixValues component: component
            }
        }

        // Trunk/global jobs
        trunkLinux {
            jobName 'pct-trunk-build-installer-l-x64'
            server jenkinsServers.buildmasterNL
            description 'Linux'
        }
        trunkFrtLinux {
            jobName 'PlatformCore-L'
            server jenkinsServers.buildmasterNL
            description 'Linux'
        }
        trunkFrtWindows {
            jobName 'PlatformCore-W'
            server jenkinsServers.buildmasterNL
            description 'Windows'
        }
        uiUnitComponents.each { component ->
            "trunk-uiunit-$component" {
                jobName "${component.replace('artifact', '')}-trunk"
                server jenkinsServers.globalUIUnits
                description component.replace('artifact', '')
                matrixValues component: component
            }
        }
    }

    regressionTests {
        BVT {
            compare jenkinsJobs.wipLinux, jenkinsJobs.trunkLinux
            others jenkinsJobs.wipLinuxJava8, jenkinsJobs.wipWindows
        }
        FRT {
            compare jenkinsJobs.wipFrtLinux, jenkinsJobs.trunkFrtLinux
            compare jenkinsJobs.wipFrtWindows, jenkinsJobs.trunkFrtWindows
        }
        UIUnit {
            compare jenkinsJobs.findAll { it.name.startsWith('wip-uiunit-') },
                    jenkinsJobs.findAll { it.name.startsWith('trunk-uiunit-') }
        }
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

tasks.withType(JavaCompile) {
    options.encoding = "ISO-8859-1"
}

sourceSets {
    main {
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
        resources { srcDir 'src/main/resources' }
    }
    test {
        groovy { srcDirs = ['src/test/groovy'] }
        resources { srcDirs = ['src/test/resources'] }
    }
}

String buildRepos = 'http://buildrepos.vanenburg.com/'
repositories {
    ivy {
        url buildRepos + 'external'
        layout 'maven'
    }
    ivy {
        url buildRepos + 'bop'
        layout 'maven'
    }
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.+'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.6'
    testCompile 'junit:junit:4.11'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'cglib:cglib-nodep:2.2'
    testCompile 'org.objenesis:objenesis:2.1'
    testCompile 'org.eclipse.jetty:jetty-server:9.1.0.M0'
    testCompile 'commons-io:commons-io:2.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

